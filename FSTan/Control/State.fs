module rec FSTan.Control.State

open FSTan.HKT

open FSTan.Monad
open FSTan.Data.Identity
open FSTan.Control.Trans

module StateT = FSTan.Control.Trans.State

type S_Id() =
    inherit mkIdentity<S_Id>()

type mkState<'ST, 's> = StateT.mkStateTras<'ST, 's, mkIdentity<S_Id>>

[<GeneralizableValue>]
let runState<'ST, 's, 'a>(m: hkt<mkState<'ST, 's>, 'a>): ('s -> 'a * 's) =
    let f = StateT.runStateT m
    fun s -> S_Id.unwrap (f s)

let State<'ST, 's, 'a> (f: 's -> ('a * 's)): hkt<mkState<'ST, 's>, 'a> =
    let f = fun s -> S_Id.wrap (f s)
    StateT.StateT f

let (|State|) (s: hkt<mkState<'ST, 's>, 'a>) =
    let (StateT.StateT f) = s
    in State (fun s -> S_Id.unwrap (f s))




















































































































































































































































































































































